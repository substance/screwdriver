#!/usr/bin/env python
import argparse
import os
import sys
from substance.util import read_json, project_file
from substance.screwdriver import ScrewDriver


# Command line arguments
# ========

parser = argparse.ArgumentParser(description='Update the mothership.')

parser.add_argument('--update', '-u', action='store_const', dest="action", const="update", help='Update the whole project (pull and build).')
parser.add_argument('--checkout', action='store_const', dest="action", const="checkout", help='Checkout the module versions as specified in project.json.')
parser.add_argument('--pull', action='store_const', dest="action", const="pull", help='Pull the current branches from origin.')
parser.add_argument('--push', action='store_const', dest="action", const="push", help='Push the current branches to origin.')
parser.add_argument('--status', '-s', action='store_const', dest="action", const="status", help='Git status for all sub-modules.')
parser.add_argument('--package', nargs='?', const=None, default=False, help='Create package.json file according to project settings.')
parser.add_argument('--shrinkwrap', nargs='?', const=None, default=False, help='Create npm-shrinkwrap.json according to project settings.')
parser.add_argument('--tag', nargs='?', const=None, default=False, help='Create a new tag. Adaptes project.json and creates an npm-shrinkwrap file with exact current SHAs for sub-modules.')
parser.add_argument('--bundle', nargs='?', const=None, default=False, help='Create a bundle using the configuration given in "project.json". Options: "nominify"')
parser.add_argument('--each', nargs='?', const=True, default=False, help='Run something for each module "substance --each -- echo \"$module\".')
parser.add_argument('argv', nargs='*', help='Arguments passed to the command.')

# Main
# ========

args = vars(parser.parse_args())

action = args['action']
if args["package"] != False:
  action = "package"
if args["shrinkwrap"] != False:
  action = "shrinkwrap"
elif args["bundle"] != False:
  action = "bundle"
elif args["tag"] != False:
 action = "tag"
elif args['each'] != False:
  action = "each"
elif action == None:
  action = "serve"

root_dir = os.path.realpath(os.getcwd())

screwDriver = ScrewDriver(root_dir)
method = getattr(screwDriver, action)
method(args)
